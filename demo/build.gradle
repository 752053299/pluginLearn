import groovy.xml.MarkupBuilder
apply plugin: 'com.android.application'
//apply plugin: 'com.qiaoguan.test.plugin.myPlugin'
apply from: 'releaseinfo.gradle'
apply plugin: 'AndroidToolHookPlugin'
apply plugin: 'PandoraHost'
apply plugin: 'com.imooc.gradle.study'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.mytestapp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']//修改so库的存放位置
        }
        main {
            res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player']
        }

    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'androidx.appcompat:appcompat:1.0.2'
    compile 'androidx.constraintlayout:constraintlayout:1.1.3'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'androidx.test.ext:junit:1.1.1'
    androidTestCompile 'androidx.test.espresso:espresso-core:3.2.0'

}

task apkcopy (name: 'apkcopy',group: 'qiaoguan',description: 'task study') {
    doLast {
        println this.buildDir.path
        def sourcePath = this.buildDir.path +'/outputs/apk'
        def desation = 'd:/'
        def command = "move ${sourcePath} ${desation}"
        exec {
            try {
                executable 'bash'
                args '-c' ,command
                this.println 'the command is execute success'
            }catch(GradleException e){
                println "the command is execute failed: ${e.getMessage()}."
            }
        }
    }
}
//计算build执行时长
def startTime,endTime
this.afterEvaluate { Project project->
    //保证所有task配置完毕
    def preBuildTask =project.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startTime = System.currentTimeMillis()
        println 'the start time is: ' + startTime
    }
    def buildTask = project.tasks.getByName('build')
    buildTask.doLast {
        endTime = System.currentTimeMillis()
        println 'the end time is: ' + endTime
        println "the build time is: ${endTime - startTime}"
    }
}


task taskX(name: "taskX") {
    mustRunAfter "taskY"
    doLast {
        println 'x'
    }
}

task taskY(name: "taskY") {
    mustRunAfter "taskZ"
    doLast {
        println 'y'
    }
}

this.project.afterEvaluate {project ->
    def buildTask = project.tasks.getByName('build')
    if (buildTask != null){
        writeTask.execute()
    }
}


Pandora {

}
